// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
   previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String   
  posts     post[]
  favorites favorites[]
  likes     likes[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model post {
  id        Int      @id @default(autoincrement())
  name      String    
  fanArtUrl   String @unique
  author    users    @relation(fields: [authorId], references: [id])
  authorId  Int
  favorites favorites[]  
  likes     likes[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model favorites {
  id        Int      @id @default(autoincrement())
  user      users    @relation(fields: [userId], references: [id])
  post      post     @relation(fields: [postId], references: [id])
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model likes {
  id        Int      @id @default(autoincrement())
  user      users    @relation(fields: [userId], references: [id])
  post      post     @relation(fields: [postId], references: [id])
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([userId, postId]) // Adiciona unicidade na combinação de userId e postId
}

